class Solution {
public:
//     void getsum(int st,vector<vector<int>>&adj,int p,int lev,vector<int>&dp)
//     {
//         // if(st==p)
//         //     return 0;
        
//         int sum=0;
//         for(int i=0;i<adj[st].size();i++)
//         {
//             if(adj[st][i]!=p)
//             {
//                 dp[adj[st][i]]=lev+1;
//                 getsum(adj[st][i],adj,st,lev+1,dp);
//             }
            
//         }
//         // return sum;
//     }
    void dfs(int c,int p,vector<int>&dist,vector<int>&sub,vector<vector<int>>&adj)
    {
        // if(c==p)
        //     return 0;
        
        for(int i=0;i<adj[c].size();i++)
        {
            if(adj[c][i]==p)
                continue;
            dfs(adj[c][i],c,dist,sub,adj);
            dist[c]+=dist[adj[c][i]]+sub[adj[c][i]];
            sub[c]+=sub[adj[c][i]];
        }
        
        sub[c]++;
        // ret
    }
    void dfs2(int c,int p,vector<int>&sub,vector<vector<int>>&adj,vector<int>&ans,int now)
    {
        ans[c]=now;
        for(int i=0;i<adj[c].size();i++)
        {
            if(adj[c][i]!=p)
            {
                int a=adj[c][i];
                dfs2(a,c,sub,adj,ans,now-sub[a]+sub[0]-sub[a]);
            }
        }
        
        
    }
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        vector<int>dist(n,0);
        
        vector<vector<int>>adj(n);
        for(int i=0;i<edges.size();i++)
        {
            int a=edges[i][0];
            int b=edges[i][1];
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        // for(int i=0;i<n;i++)
        // {
        //     // vector<bool>visit(n,false);
        //     vector<int>dep(n,0);
        //    getsum(i,adj,-1,0,dep);
        //     // v[i]=sum;
        //     int sum=0;
        //     for(int j=0;j<n;j++)
        //     {
        //         if(j!=i)
        //             sum+=dep[j];
        //     }
        //     v[i]=sum;
            vector<int>sub(n,0);
        dfs(0,0,dist,sub,adj);
        vector<int>ans(n,0);
        dfs2(0,0,sub,adj,ans,dist[0]);
        return ans;
            
        // }
        
        // return ans;
    }
};
